generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int     @id @default(autoincrement())
  username String  @unique
  password String
  isAdmin  Boolean @default(false)

  Order    Order[]
  accounts Account[]
  sessions Session[]
}

model Order {
  id                Int      @id @default(autoincrement())
  userId            Int
  shippingAddressId Int
  createdAt         DateTime @default(now())
  totalPrice        Decimal
  number            Int

  user           User           @relation(fields: [userId], references: [id])
  shippingAdress Address        @relation(fields: [shippingAddressId], references: [id])
  products       OrderProduct[]
}

model Address {
  id          Int    @id @default(autoincrement())
  firstName   String
  lastName    String
  phoneNumber String
  street      String
  zipcode     String
  city        String

  orders Order[]
}

model Product {
  id          Int     @id @default(autoincrement())
  name        String  @unique
  description String
  image       String
  video       String
  price       Decimal
  isArchived  Boolean

  categories Category[]
  orders     OrderProduct[]
}

model OrderProduct {
  id            Int     @id @default(autoincrement())
  productId     Int
  orderId       Int
  quantity      Int
  subTotalPrice Decimal

  order   Order   @relation(fields: [orderId], references: [id])
  product Product @relation(fields: [productId], references: [id])
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  products Product[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}
