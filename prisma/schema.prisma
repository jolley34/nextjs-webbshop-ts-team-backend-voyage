generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  username      String?   @unique
  isAdmin       Boolean   @default(false)
  password      String?
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt

  accounts Account[]
  sessions Session[]
  orders   Order[]
}

model Order {
  id                String   @id @default(cuid())
  userId            String
  shippingAddressId String
  createdAt         DateTime @default(now())
  totalPrice        Decimal
  number            Int

  user           User           @relation(fields: [userId], references: [id])
  shippingAdress Address        @relation(fields: [shippingAddressId], references: [id])
  products       OrderProduct[]
}

model Address {
  id          String @id @default(cuid())
  firstName   String
  lastName    String
  phoneNumber String
  street      String
  zipcode     String
  city        String

  orders Order[]
}

model Product {
  id          String  @id @default(cuid())
  name        String
  description String
  image       String
  video       String
  price       Decimal
  isArchived  Boolean

  categories Category[]
  orders     OrderProduct[]
}

model OrderProduct {
  id            String  @id @default(cuid())
  productId     String
  orderId       String
  quantity      Int
  subTotalPrice Decimal

  order   Order   @relation(fields: [orderId], references: [id])
  product Product @relation(fields: [productId], references: [id])
}

model Category {
  id       String    @id @default(cuid())
  name     String    @unique // Fina bord
  // slug     String    @unique // fina-bord
  products Product[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}
